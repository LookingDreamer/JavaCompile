<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.0.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
               http://www.springframework.org/schema/util
               http://www.springframework.org/schema/util/spring-util-2.0.xsd
               ">

	<context:property-placeholder location="classpath:config/config.properties" />

	<!--创建jdbc数据源 -->
	<bean id="dataSourceMySql" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="url" value="${mysql.url}" />
		<property name="driverClassName" value="${mysql.driver}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<property name="maxTotal" value="${dbcp2.maxTotal}" />
		<property name="maxIdle" value="${dbcp2.maxIdle}" />
		<property name="minIdle" value="${dbcp2.minIdle}" />
		<property name="initialSize" value="${dbcp2.initialSize}" />
		<property name="timeBetweenEvictionRunsMillis" value="${dbcp2.timeBetweenEvictionRunsMillis}" />
		<property name="poolPreparedStatements" value="${dbcp2.poolPreparedStatements}" />
		<property name="maxOpenPreparedStatements" value="${dbcp2.maxOpenPreparedStatements}" />
		<property name="removeAbandonedTimeout" value="${dbcp2.removeAbandonedTimeout}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="${dbcp2.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnReturn" value="${dbcp2.testOnReturn}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${dbcp2.testWhileIdle}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句,如果validationQuery为 null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用。 -->
		<property name="validationQuery" value="${dbcp2.validationQuery}" />
	</bean>

	<bean id="dataSourceMySqlTwo" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="url" value="${mysql.two.url}" />
		<property name="driverClassName" value="${mysql.two.driver}" />
		<property name="username" value="${mysql.two.username}" />
		<property name="password" value="${mysql.two.password}" />
		<property name="maxIdle" value="${dbcp2.two.maxIdle}" />
		<property name="minIdle" value="${dbcp2.two.minIdle}" />
		<property name="initialSize" value="${dbcp2.two.initialSize}" />
		<property name="timeBetweenEvictionRunsMillis" value="${dbcp2.two.timeBetweenEvictionRunsMillis}" />
		<property name="poolPreparedStatements" value="${dbcp2.two.poolPreparedStatements}" />
		<property name="maxOpenPreparedStatements" value="${dbcp2.two.maxOpenPreparedStatements}" />
		<property name="removeAbandonedTimeout" value="${dbcp2.two.removeAbandonedTimeout}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="${dbcp2.two.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnReturn" value="${dbcp2.two.testOnReturn}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${dbcp2.two.testWhileIdle}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句,如果validationQuery为 null，testOnBorrow、testOnReturn、testWhileIdle都不起其作用。 -->
		<property name="validationQuery" value="${dbcp2.two.validationQuery}" />
	</bean>

	<bean id="dataSource" class="com.cninsure.core.dds.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSourceMySql" value-ref="dataSourceMySql" />
				<entry key="dataSourceMySqlTwo" value-ref="dataSourceMySqlTwo" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceMySql" />
	</bean>

	<bean id="dataSourceInterceptor" class="com.cninsure.core.dds.DataSourceInterceptor" />
	<aop:config>
		<aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor">
			<aop:pointcut id="dsMysql"
				expression="execution(* com.*.*.manager.scm.*.*.*(..))" />
			<aop:pointcut id="dsMysqlDft"
				expression="execution(* com.*.*.controller.*.*(..))" />
			<aop:pointcut id="dsMysqlTwo"
				expression="execution(* com.*.*.manager.scr.*.*.*(..))" />
			<aop:before method="setdataSourceMysql" pointcut-ref="dsMysql" />
			<aop:before method="setdataSourceMysql" pointcut-ref="dsMysqlDft" />
			<aop:before method="setdataSourceMysqlTwo" pointcut-ref="dsMysqlTwo" />
		</aop:aspect>
	</aop:config>

	<!-- 使用JDBC事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="append*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="insert*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="save*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="modify*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="edit*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="delete*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="remove*" propagation="REQUIRED" timeout="60"/>
			<tx:method name="repair" propagation="REQUIRED" timeout="60"/>
			<tx:method name="delAndRepair" propagation="REQUIRED" timeout="60"/>
			<tx:method name="syc*" propagation="REQUIRES_NEW" />

			<tx:method name="get*" propagation="SUPPORTS" timeout="60"/>
			<tx:method name="find*" propagation="SUPPORTS" timeout="60"/>
			<tx:method name="load*" propagation="SUPPORTS" timeout="60"/>
			<tx:method name="search*" propagation="SUPPORTS" timeout="60"/>
			<tx:method name="datagrid*" propagation="SUPPORTS" timeout="60"/>
			<tx:method name="*" propagation="SUPPORTS" timeout="60"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP切面 -->

	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.*.*.service..*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:config/sqlMapConfig.xml"></property>
		<property name="mapperLocations" value="classpath:mapping/mysql/**/*Mapper.xml" />
	</bean>

	<!-- 配置SQLSession模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="50000000" />
	</bean>

	<!-- spring redis -->
	<bean
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<property name="maxInactiveIntervalInSeconds" value="7200"></property>
	</bean>

	<util:constant
		static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP" />
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<property name="numTestsPerEvictionRun" value="1024" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="minEvictableIdleTimeMillis" value="-1" />
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="blockWhenExhausted" value="false" />
	</bean>
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">

        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.pwd}"/>
        <property name="poolConfig" ref="poolConfig"/>
	</bean>
</beans>
